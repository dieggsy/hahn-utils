* TODO Iterate through =revisions= in =.release-info=.
  Try to glean some information from the optional repo: is it e.g.
  git, svn? Extract the info.

  Otherwise, use a =@(release “tag” “message”)= directive.

  #+BEGIN_SRC scheme
    (use debug
         html-parser
         matchable
         posix
         shell
         sxml-transforms)
    
    ;;; Is this sufficient? Seems we have to go up; and, even then, it may
    ;;; be misleading: might be in an unversion directory in some other,
    ;;; unrelated project.
    ;;;
    ;;; Might have to specify the repo, after all?
    (define (git-repo?) (directory-exists? ".git"))
    (define (svn-repo?) (directory-exists? ".svn"))
    (define (hg-repo?) (directory-exists? ".hg"))
    (define (fossil-repo?) (directory-exists? ".fslckout"))
    
    (define (git-message tag)
      (match (string-tokenize (capture (git tag -l ,tag -n1)))
        ((tag . message) (string-join message))
        (_ #f)))
    
    (define (svn-message tag)
      (with-input-from-string (capture (svn -v --stop-on-copy ,(format "tags/~a" tag)))
        pp))
    
    (define (with-working-directory directory thunk)
      (let ((original-directory (current-directory)))
        (dynamic-wind (lambda () (current-directory directory))
            thunk
            (lambda () (current-directory original-directory)))))
    
    (with-working-directory "~/src/chicken-eggs/chicken-doc/trunk/"
      (lambda ()
        (let ((release-info (glob "*.release-info")))
          (unless (null? release-info)
            (with-input-from-file (car release-info)
              (lambda ()
                (let ((message (cond ((git-repo?) git-message)
                                     ((svn-repo?) svn-message)
                                     (else #f))))
                  (when message
                    (do ((object (read) (read)))
                        ((eof-object? object))
                      (match object
                        (('release release)
                         (debug (message release)))
                        (_)))))))))))
  #+END_SRC

  More and more, it’s looking like we’ll have to have access to the
  egg dir itself; if it’s not in =(current-directory)=. There, we can
  find things like =.meta=, =.release-info=, &c.; and determine
  whether or not it’s a repo.

  This, as opposed to a manifold of choices.

  You know what, though? That’s a pain in the ass; can we please
  mandate current working directory?

  Or do we want all the commit messages that belong to that tag and
  call it a changelog?

  See [[http://stackoverflow.com/questions/8136178/git-log-between-tags][this]] for git; [[http://www.bernzilla.com/item.php?id%3D613][this]] for svn; this could be a verbose option?
* TODO =@(noop)= is ugly.
* TODO Copyright?
* TODO Module-awareness?
* TODO Author and repository should go first.
  See [[http://wiki.call-cc.org/eggref/4/salmonella][here]].
* TODO Optional descriptions for examples?
* TODO Find a canonical egg to imitate.
  Or, just do a survey for how to handle e.g. dependencies, versions.
* TODO Add the ability to do generic procedures not associated with code.
  E.g. just a naked =@(procedure for-instance "For instance" (x
  "This") (y "That"))=.
* TODO Add the ability to document e.g. constructors in records.
* TODO Add a =@nosource= directive.
* TODO Find some way to demarcate the source-block.
* TODO Still getting segfaults on eval
* TODO Clearly demarcate source code.
  I keep thinking it's an example but end up getting clowned.
* TODO Things like =@example-no-eval= should be done with flags.
* TODO Formalize =@noop=.
* TODO Bring "Examples" down to the lowest heading.
* TODO Doubling up functions
  See e.g. [[http://api.call-cc.org/doc/posix#def:call-with-output-pipe][call-with-{input,output}-pipe]]. Groups of functions; another
  example is [[http://api.call-cc.org/doc/scsh-process][scsh-process]].

  Could have a simple =(@group <function>)= command.
* TODO Inherit unspecified parameters from other procedures.
  #+BEGIN_SRC scheme
    (define (foo bar)
      @("For reals"
        (bar (@inherit baz [qux]))))
    
    (define (baz qux)
      @("Sort of"
        (qux "Yes, wirklich")))
  #+END_SRC
* TODO =setup-helper=-like-thing we can call from setup.
# <<setup-helper>>
  Would define a form =cock= on analogy with e.g. =compile=;
  basically, a wrapper around =run=. Has options like: =output:=; if
  given no files, picks up all =.scm= in the directory?

  Would be nice if it could default to e.g. =<egg-name>.wiki=.
* TODO Groff output for man-pages?
  This is usually bin-specific, though; we'd put directives in the
  bin-file, then, wouldn't we: and couldn't we parse =args= while
  we're at it?
* TODO HTML driver
  An HTML driver is useful, unfortunately, for e.g. github-pages.
* TODO =pre-post-order=
  A better mechanism would be to transform the code into some
  intermediate S-expression representation; that way, each driver is
  simply a ruleset.
* TODO Markup
  Instead of using strings (which will be given verbatim), can't we
  have some sort of ad-hoc s-expression-based markup? E.g.:

  #+BEGIN_SRC scheme
    @(This is (em some) (_ markup).
      (arg "Argument"))
  #+END_SRC

  Meh; we have no good way to differentiate argument lists. Fuck it:
  let's go [[http://wiki.call-cc.org/eggref/4/lowdown][markdown]].

  (See the defunct [[https://wiki.call-cc.org/eggref/4/multidoc][multidoc]], by the way.)

  It's going to be a pain-in-the-ass to distinguish between intra- and
  inter-document links, isn't it? How I wish I could defer to the
  renderer.

  #+BEGIN_SRC scheme
    (use debug lowdown posix srfi-69 test)
    
    (test
     "All the different items we'd have to deal with."
     '(&
       @
       auto-link
       blockquote
       bullet-list
       class
       code
       comment
       div
       emphasis
       explicit-link
       h2
       h3
       heading
       hr
       href
       html-element
       id
       input
       item
       label
       ordered-list
       paragraph
       ref
       reference
       reference-link
       strong
       title
       ul
       verbatim)
     (let ((items (make-hash-table)))
       (for-each
           (lambda (file)
             (call-with-input-file
                 file
               (lambda (input)
                 (let ((document (markdown->sxml* input)))
                   (let iter ((document document))
                     (if (pair? document)
                         (for-each iter document)
                         (if (symbol? document)
                             (hash-table-set! items document #t))))))))
         (glob "markdown-tests/*"))
       (sort (hash-table-keys items)
             (lambda (x y) (string< (symbol->string x)
                               (symbol->string y))))))
  #+END_SRC

  #+BEGIN_SRC scheme
    (use debug lowdown posix srfi-69 test)
    
    (for-each
        (lambda (file)
          (call-with-input-file
              file
            (lambda (input)
              (let ((document (markdown->sxml* input)))
                (debug document)
                (let iter ((document document))
                  (if (pair? document)
                      (for-each iter document)
                      (if (symbol? document)
                          'harro)))))))
      (glob "markdown-tests/*"))
  #+END_SRC

  #+BEGIN_SRC scheme
    (reference (label "once") (href "/url") (title #f))
    
    (explicit-link
     (href "/url/")
     (label "URL" (#\space) "and" (#\space) "title")
     (title "title preceded by two spaces"))
  #+END_SRC

  #+BEGIN_SRC scheme
    (use debug lowdown sxpath sxml-transforms)
    
    (define texify identity)
    
    (define (node-children node)
      ((sxpath '((*not* @))) node))
        
    (define (node-attributes node)
      ((sxpath '(@)) node))
    
    (define (node-text node)
      ((sxpath '(*text*)) node))
    
    (define (call-with-children-attributes tag f)
      (f (node-children tag) (node-attributes tag)))
    
    (define markdown->wiki
      `(
        ;; Do we want text or children?
        (code . ,(lambda tag `("{{" ,(node-children tag) "}}")))
        (emphasis . ,(lambda tag `("''" ,(node-children tag) "''")))
        (explicit-link
         *preorder* . ,(lambda tag
                         (let ((href ((sxpath '(href)) tag)) 
                               (label ((sxpath '(label)) tag)))
                           `("[["
                             ,(node-children href)
                             "|"
                             ,(node-children label)
                             "]]"))))
        (paragraph . ,(lambda tag `(,(node-children tag) "\n\n")))
        (strong . ,(lambda tag `("'''" ,(node-children tag) "'''")))
        (*TOP* . ,(lambda tag (node-children tag)))
        (*PI* . ,(lambda tag '()))
        (*text* . ,(lambda (tag text) text))
        (*default* . ,(lambda tag (node-text tag)))))
    
    (define markdown->latex
      `(
        ;; Do we want text or children?
        (code . ,(lambda tag `("\\texttt{" ,(node-children tag) "}")))
        (emphasis . ,(lambda tag `("\\emph{" ,(node-children tag) "}")))
        (explicit-link
         *preorder* . ,(lambda tag
                         (let ((href ((sxpath '(href)) tag)) 
                               (label ((sxpath '(label)) tag)))
                           `("\\href{"
                             ,(node-children href)
                             "}{"
                             ,(node-children label)
                             "}"))))
        (paragraph . ,(lambda tag `(,(node-children tag) "\n\n")))
        (strong . ,(lambda tag `("\\textbf{" ,(node-children tag) "}")))
        (*TOP* . ,(lambda tag (node-children tag)))
        (*PI* . ,(lambda tag '()))
        ;; Hallelujah: this doesn't touch string-literals above; I'm free
        ;; to texify all text passing through here.
        (*text* . ,(lambda (tag text) (texify text)))
        (*default* . ,(lambda tag (node-text tag)))))
    
    (for-each (lambda (markdown)
           (SRV:send-reply
            (pre-post-order (markdown->sxml* markdown)
                            markdown->latex
                            ;; markdown->wiki
                            )))
         '("[Intradocument link](#intra)"
           "[Interdocument link](/inter)"
           "[Blank link]"
           "*harro*"
           "_harro_"
           "**harro**"
           "__harro__"
           "We're writing a paragraph of text here, aren't we?
    
    I believe so."
           "This `@`-read-syntax is for reals."))
  #+END_SRC

  In LaTeX, let's look for a prepended-hash: if it's there, it's a ref
  to a label; if not, it's a hyperlink.
* TODO Keyword-arguments to procedures
  See [[http://api.call-cc.org/doc/spiffy/start-server][start-server]].
* TODO Long signature get cut off in =case-lambda=.
* TODO =@NB=
* TODO =@TODO=
* TODO References
* TODO Classes?
  Maybe this can be an extension.
* TODO Multiple authors (maintainer, &c.)
  [[http://tex.stackexchange.com/questions/9594/adding-more-than-one-author-with-different-affiliation][Using footnotes]] and [[http://tex.stackexchange.com/questions/4805/whats-the-correct-use-of-author-when-multiple-authors][using \texttt{\char`\\ and}]].
* DONE Have some default rule for including unknown metadata.
  CLOSED: [2013-08-18 Sun 03:04]
* DONE Versions
  CLOSED: [2013-08-18 Sun 03:04]
  Parse =*.release-info= to get the versions; look up said tags for
  git, svn, hg, &c.

  #+BEGIN_SRC scheme
    (use shell)
    
    (capture (git tag -l -n1))
  #+END_SRC

  #+BEGIN_SRC scheme
    (use debug
         git
         srfi-13)
    
    (let* ((repo (repository-open))
           (tags (tags repo)))
      (map (lambda (tag) (cons (tag-name tag)
                          (string-trim-both (tag-message tag))))
           tags))
  #+END_SRC
* DONE Pull things out of the metafile.
  CLOSED: [2013-08-18 Sun 03:04]
  See [[http://wiki.call-cc.org/Metafile%2520reference][here]]; includes:

  - Synopsis
  - Author
  - Maintainer
  - Files
  - License
  - Category
  - Needs
    - Why not include a link, too?
  - Depends
  - Test-depends
  - Hidden
  - Platform
  - Foreign-depends

  Too bad we can’t get the name of the egg from the =.meta=; what
  about the name of the metafile itself?

  Can we do away with the cock-preamble altogether? User and email
  might be tricky.

  Also =repository=: see [[http://api.call-cc.org/doc/pseudo-meta-egg-info][here]].

  #+BEGIN_SRC scheme
    (use alist-lib
         debug
         irregex
         matchable
         posix
         srfi-69)
    
    (define default-synopsis (make-parameter '("Egg synopsis")))
    (define default-author (make-parameter '("Anonymous")))
    (define default-category (make-parameter '("uncategorized")))
    
    (define (pair?-or-car value)
      (and (pair? value) (car value)))
    
    (define (maybe-update-metadata! metadata egg-data keys)
      (define (update-metadatum! key new-key map default)
        (let ((value (alist-ref/default egg-data key default)))
          (when value
            (hash-table-set! metadata
                             new-key
                             (map value)))))
      (for-each (match-lambda ((key)
                          (update-metadatum! key key pair?-or-car #f))
                         ((key new-key)
                          (update-metadatum! key new-key pair?-or-car #f))
                         ((key new-key map)
                          (update-metadatum! key new-key map #f))
                         ((key new-key map default)
                          (update-metadatum! key new-key map default)))
        keys))
    
    (define (find-metafile)
      (let ((metafiles (glob "*.meta")))
        (and metafiles (car metafiles))))
    
    (define parse-metafile
      (case-lambda
       (() (parse-metafile (find-metafile)))
       ((metafile)
        (let ((metafile (and metafile (find-metafile)))
              (metadata (make-hash-table)))
          (when metafile
            (and-let* ((egg-match
                        (irregex-match
                         '(: (=> egg-name (* any)) ".meta")
                         metafile))
                       (egg-name
                        (irregex-match-substring
                         egg-match
                         'egg-name)))
              (let ((egg-data (with-input-from-file metafile read)))
                (maybe-update-metadata!
                 metadata
                 egg-data
                 `((synopsis description ,pair?-or-car ,(default-synopsis))
                   (author author ,pair?-or-car ,(default-author))
                   (maintainer)
                   (files)
                   (license)
                   (category category ,pair?-or-car ,(default-category))
                   (needs depends ,values)
                   (depends depends ,values)
                   (test-depends test-depends ,values)
                   (hidden hidden ,null?)
                   (platform)
                   (foreign-depends foreign-depends ,values))))))
          metadata))))
    
    (debug (hash-table->alist (parse-metafile)))
  #+END_SRC
* DONE Need version history and license
  CLOSED: [2013-08-18 Sun 03:04]
  See [[http://wiki.call-cc.org/eggref/4/http-session][http-session]], for example; can take the version history from
  the git-tags? Assumes that we’re in a git repo.

  License is simply part of the metadata; maybe we should get it from
  the [[egg]], after all.
* DONE Get metadata from egg.
  CLOSED: [2013-08-18 Sun 03:04]
# <<egg>>
  Authors, License, &c.
* DONE Changelog
  CLOSED: [2013-08-18 Sun 03:04]
* DONE Repository
  CLOSED: [2013-08-18 Sun 03:04]
* DONE We're still getting parser-leakage!
  CLOSED: [2012-10-11 Thu 04:02]
  - CLOSING NOTE [2012-10-11 Thu 04:02] \\
    Use =@(noop)= or similar.
  #+BEGIN_SRC scheme :tangle out-of-sequence.scm
    @(egg test)
    @(noop)
    (define x 2)
    (define y @("For reals") 3)
  #+END_SRC
* DONE Add a newline after =@(text ..)=.
  CLOSED: [2012-10-11 Thu 04:03]
* DONE =@example=
  CLOSED: [2012-10-11 Thu 04:32]
  Everything should be able to take examples, even modules; examples
  should be as fundamental as source-code.

  Since the package itself is installed before cock, we can
  theoretically =(use <package>)=, run the examples, and list the
  output. Some kind of =@dontrun= directive, &c.

  #+BEGIN_SRC scheme :tangle example.scm :shebang #!/usr/bin/env chicken-scheme
    (use debug
         environments
         fmt
         numbers
         posix
         R
         utils)
    
    (define (example description . body)
      (display description)
      (let ((env (environment-copy (interaction-environment))))
        (eval '(require-extension R) env)
        (do ((i 1 (+ i 1))
             (body body (cdr body))
             (expression (car body) (car body)))
            ((null? body))
          (fmt #t (format "#;~a> " i) (pretty expression))
          (fmt #t (pretty (eval expression env))))))
    
    (example "This is insanity"
             '(R* (ls))
             '(R* (ls envir: .BaseNamespaceEnv all.names: #t pattern: "qr.*"))
             '(R* (seq -5 5 by: 0.2))
             '(R* (c (: 1 3)))
             '(R* (c (: 1 3) ,NA))
             '(R* (list "harro" ,NA))
             '(R* (list "harro" (logical 0)))
             '(R* (c "harro" (logical 0)))
             '(R* (c "harro" ,NA))
             '(R (str (list 1 2 3 ,NA)))
             '(R* (is.na ,NA))
             '(R (data attitude))
             '(R* (attributes (summary (lm (as.formula "rating ~ .") data: attitude))))
             '(R* ($ (summary (lm (as.formula "rating ~ .") data: attitude)) "coefficients"))
             '(R* (is.finite ,+inf.0))
             '(R* (is.finite ,-inf.0))
             '(R* (is.finite ,+nan.0))
             '(R* (is.finite ,-nan.0))
             '(R* (is.na ,NA))
             '(R* (c 1 2 3 ,NA))
             )
    
  #+END_SRC

  #+BEGIN_SRC scheme :tangle test-example.scm
    @(egg R)
    @(source (let ((x 2)) (+ 2 2)))
    @(noop)
    
    (define harro
      @("Wanted to say a lot here; but, ouch."
        (@internal))
      2)
    
    (define (frobnitz when ick)
      @("Crane, Ichabod"
        (when "A tête-à-tête with the heiress")
        (ick "with the air of one who had been sacking a henroost, rather
    than a fair lady's heart")
        (@no-source)
        (@example-no-eval
         "He goes over the mountain like this:"
         "Something, however ... must have gone wrong,\n"
         (display " for he certainly sallied forth,\n")
         (display " after no very great interval,\n")
         (display " with an air quite desolate and chapfallen.\n")
         ;; (R* (rnorm 10))
         ;; (R (ls))
         ;; (R* (ls envir: .BaseNamespaceEnv all.names: #t pattern: "qr.*"))
         ;; (R* (seq -5 5 by: 0.2))
         ))
      'away!)
    
  #+END_SRC

  Probably need an example-header that knows to e.g. ...; no, let's
  have =@egg= instead of =@title=. We'll use the egg for title, and we
  have the added benefit of knowing what the egg is called. This we
  could eventually harvest from <egg>.meta, too.

  Can we add this to the =wiki-write-block=?
* DONE Minimum required for self-documentation
  CLOSED: [2012-10-11 Thu 04:32]
  At the very least, let's have a =@(source ...)= directive; we could
  have =@(text ...)=, too, but we're going to fill it with
  wiki-specific crap.

  I'm yearning for =@(example ...)=.
* DONE Ability to suppress internally documented functions.
  CLOSED: [2012-10-11 Thu 04:33]
# <<internal-functions>>
  Let's use =@internal=. Or: instead of =@<identifier>=, we should
  reuse the keyword mechanism? Principle of least surprise? Would look
  like: =internal:=. All the asperands are alien, I think.

  On the other hand, how would you document keywords? No, we have to
  resort to something noisy.

  #+BEGIN_SRC scheme
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; If we do this, we can't document keywords named `to:'.
        (to: "Another thing")
        ;; That's why we settled on this:
        (@to "Another thing")
        @internal)
      'b)
  #+END_SRC

  Or, fuck it: just use naked symbols:

  #+BEGIN_SRC scheme
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; Don't see how we can get around this one.
        (@to "Another thing")
        internal)
      'b)
    
    (define (procedure a)
      @("Procedure does something."
        (parameters
         (a "Parameter"))
        ;; Don't see how we can get around this one.
        (to "Another thing")
        internal)
      'b)
    
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; Don't see how we can get around this one.
        to: "Another thing"
        internal:)
      'b)
    
    ;;; If we're going keyword-heavy:
    
    (define (procedure a)
      ;; `description:' already fucks up the indentation.
      @(description: "Procedure does something."
                     parameters:))
    
    (define (procedure a)
      @("Procedure does something."
        parameters: '((a "Parameter"))
        to: "Another thing"
        internal: #t))
    
  #+END_SRC
* CANCELED Descriptions can take arbitrary directives?
  CLOSED: [2012-10-11 Thu 04:32]
  - CLOSING NOTE [2012-10-11 Thu 04:32] \\
    Let's just special case e.g. @source.
  If you want to e.g. include source; first element, therefore, a
  list?

  Or should we special-case =@source= in addition to =@example=? What
  about =@header=?
* CANCELED =parse-procedure=, &c. should be more than stubs.
  CLOSED: [2012-10-11 Thu 04:33]
  There's a lot of boilerplate work to be done there that we could
  specialize for e.g. wiki and latex.
* CANCELED Define an intermediate long-hand.
  CLOSED: [2012-10-11 Thu 04:33]
  If this, for instance, is our long-hand:

  #+BEGIN_SRC scheme
    (define (procedure a)
      @(description: "Do something."
        parameters: ((a "Thing to do"))
        to: "Thing done")
      (void))
  #+END_SRC

  we can come up with any number of short-hands that reduce to it.
